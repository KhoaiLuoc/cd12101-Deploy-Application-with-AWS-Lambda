{
	"info": {
		"_postman_id": "0cb13262-d992-4a33-af97-0808d2480406",
		"name": "34.Uda4_cloudDevelop",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "364577"
	},
	"item": [
		{
			"name": "Get Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkRxaC1VQ0NuZ0tEbWMzLThKU0FCTyJ9.eyJpc3MiOiJodHRwczovL2Rldi1tenlremFkbnh5bTg4NTJsLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NjM1YjgxMTRlOTgzZTdhNTg3M2NlYmQiLCJhdWQiOlsiaHR0cHM6Ly9kZXYtbXp5a3phZG54eW04ODUybC51cy5hdXRoMC5jb20vYXBpL3YyLyIsImh0dHBzOi8vZGV2LW16eWt6YWRueHltODg1MmwudXMuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTcxNDgxMTMyMSwiZXhwIjoxNzE0ODk3NzIxLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYXpwIjoiN081amJKWGFOSzZ3N21oTFhyYnRwb282UHROTmp4NkMifQ.S3jEAHzv6qXEApbsve5EVxkGq7z94lTx_7mtQF3pba7Var4ha7YkiTyHlfiTo2sf_Q-8EkGz_GtgyXhkGJOetY5l6wWJJV9nYbrRK8AmSb6qXSiptw_c9yi_FtlnAh-kxuUr1jFfJ2w-Zao4hutuefz6dFvTywXZRxM3BdwvAdnsFj05JE-YVjGFy2tHKS6ft5V-D5-mt6jzq5wLl7PDBJT7dHFw-zogcl0TuZ6_LnHw9Lcous12wMTzp7X42BSdc6b6HRpqmHsL6rIbZ90NW7h6rCP6vtR4L9LUk57Gh4WsoaUg4O4vjVaeghN_-US6Sgzez5m415FkdNbmLibANg"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/dev/todos",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkRxaC1VQ0NuZ0tEbWMzLThKU0FCTyJ9.eyJpc3MiOiJodHRwczovL2Rldi1tenlremFkbnh5bTg4NTJsLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NjM1YjgxMTRlOTgzZTdhNTg3M2NlYmQiLCJhdWQiOlsiaHR0cHM6Ly9kZXYtbXp5a3phZG54eW04ODUybC51cy5hdXRoMC5jb20vYXBpL3YyLyIsImh0dHBzOi8vZGV2LW16eWt6YWRueHltODg1MmwudXMuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTcxNDg0MDc5NCwiZXhwIjoxNzE0OTI3MTk0LCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYXpwIjoiN081amJKWGFOSzZ3N21oTFhyYnRwb282UHROTmp4NkMifQ.r2BBkFs9l4WfBpyIBvBkUxkUL_LLRUIPOA_Y1mRq_gXuuH-LDkDqHZrHohC5TfPCLVKTY0Vh_MJPkdV27bGXMAsl9HjyZ1oga-nGCOarK86TeLkQSd6z3lKM2r9Zb3z1yllLUZoocLYQJVh-WjId1UU6VP8Ly0qPEPvFW5oVIv2ZREXW-VKHLz3B-SiBC-pArv9zFCE_5ECQCXOnyOzBJKlOVXmb7rdjluebAMWO_5fBP27DBFeIPmK4GuhipXTdUAXyribzdU6PQjuh-Y-z_kELu9HGV0B377q2zhQK7BuRjcV3H-Y6KPeVA7Jd3mi8v-ajzUVfZohrEeyDI--UQQ"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"ABCCCCFWR66556568888\",\"dueDate\":\"2024-05-11\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/dev/todos",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkRxaC1VQ0NuZ0tEbWMzLThKU0FCTyJ9.eyJpc3MiOiJodHRwczovL2Rldi1tenlremFkbnh5bTg4NTJsLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NjM1YjgxMTRlOTgzZTdhNTg3M2NlYmQiLCJhdWQiOlsiaHR0cHM6Ly9kZXYtbXp5a3phZG54eW04ODUybC51cy5hdXRoMC5jb20vYXBpL3YyLyIsImh0dHBzOi8vZGV2LW16eWt6YWRueHltODg1MmwudXMuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTcxNDgxMTMyMSwiZXhwIjoxNzE0ODk3NzIxLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYXpwIjoiN081amJKWGFOSzZ3N21oTFhyYnRwb282UHROTmp4NkMifQ.S3jEAHzv6qXEApbsve5EVxkGq7z94lTx_7mtQF3pba7Var4ha7YkiTyHlfiTo2sf_Q-8EkGz_GtgyXhkGJOetY5l6wWJJV9nYbrRK8AmSb6qXSiptw_c9yi_FtlnAh-kxuUr1jFfJ2w-Zao4hutuefz6dFvTywXZRxM3BdwvAdnsFj05JE-YVjGFy2tHKS6ft5V-D5-mt6jzq5wLl7PDBJT7dHFw-zogcl0TuZ6_LnHw9Lcous12wMTzp7X42BSdc6b6HRpqmHsL6rIbZ90NW7h6rCP6vtR4L9LUk57Gh4WsoaUg4O4vjVaeghN_-US6Sgzez5m415FkdNbmLibANg"
					}
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Buy bread zzzzzzzzz\",\n    \"dueDate\": \"2022-12-12\",\n    \"done\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/dev/todos/650585ec-4939-48b1-a559-fe294c5df5d6",
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkRxaC1VQ0NuZ0tEbWMzLThKU0FCTyJ9.eyJpc3MiOiJodHRwczovL2Rldi1tenlremFkbnh5bTg4NTJsLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NjM1YjgxMTRlOTgzZTdhNTg3M2NlYmQiLCJhdWQiOlsiaHR0cHM6Ly9kZXYtbXp5a3phZG54eW04ODUybC51cy5hdXRoMC5jb20vYXBpL3YyLyIsImh0dHBzOi8vZGV2LW16eWt6YWRueHltODg1MmwudXMuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTcxNDgxMTMyMSwiZXhwIjoxNzE0ODk3NzIxLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYXpwIjoiN081amJKWGFOSzZ3N21oTFhyYnRwb282UHROTmp4NkMifQ.S3jEAHzv6qXEApbsve5EVxkGq7z94lTx_7mtQF3pba7Var4ha7YkiTyHlfiTo2sf_Q-8EkGz_GtgyXhkGJOetY5l6wWJJV9nYbrRK8AmSb6qXSiptw_c9yi_FtlnAh-kxuUr1jFfJ2w-Zao4hutuefz6dFvTywXZRxM3BdwvAdnsFj05JE-YVjGFy2tHKS6ft5V-D5-mt6jzq5wLl7PDBJT7dHFw-zogcl0TuZ6_LnHw9Lcous12wMTzp7X42BSdc6b6HRpqmHsL6rIbZ90NW7h6rCP6vtR4L9LUk57Gh4WsoaUg4O4vjVaeghN_-US6Sgzez5m415FkdNbmLibANg"
					}
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/dev/todos/650585ec-4939-48b1-a559-fe294c5df5d6",
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get PresignUrl",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IkRxaC1VQ0NuZ0tEbWMzLThKU0FCTyJ9.eyJpc3MiOiJodHRwczovL2Rldi1tenlremFkbnh5bTg4NTJsLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2NjM1YjgxMTRlOTgzZTdhNTg3M2NlYmQiLCJhdWQiOlsiaHR0cHM6Ly9kZXYtbXp5a3phZG54eW04ODUybC51cy5hdXRoMC5jb20vYXBpL3YyLyIsImh0dHBzOi8vZGV2LW16eWt6YWRueHltODg1MmwudXMuYXV0aDAuY29tL3VzZXJpbmZvIl0sImlhdCI6MTcxNDgxMTMyMSwiZXhwIjoxNzE0ODk3NzIxLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwiYXpwIjoiN081amJKWGFOSzZ3N21oTFhyYnRwb282UHROTmp4NkMifQ.S3jEAHzv6qXEApbsve5EVxkGq7z94lTx_7mtQF3pba7Var4ha7YkiTyHlfiTo2sf_Q-8EkGz_GtgyXhkGJOetY5l6wWJJV9nYbrRK8AmSb6qXSiptw_c9yi_FtlnAh-kxuUr1jFfJ2w-Zao4hutuefz6dFvTywXZRxM3BdwvAdnsFj05JE-YVjGFy2tHKS6ft5V-D5-mt6jzq5wLl7PDBJT7dHFw-zogcl0TuZ6_LnHw9Lcous12wMTzp7X42BSdc6b6HRpqmHsL6rIbZ90NW7h6rCP6vtR4L9LUk57Gh4WsoaUg4O4vjVaeghN_-US6Sgzez5m415FkdNbmLibANg"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/dev/todos/650585ec-4939-48b1-a559-fe294c5df5d6/attachment",
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://ovci1trb9l.execute-api.us-east-1.amazonaws.com"
		}
	]
}